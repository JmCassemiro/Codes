#include <iostream>
#include <cstring>
#include <vector>
#include <stdlib.h>

using namespace std;

// As funcoes nao comentadas aqui, estao no PDF!

struct Pokemon
{
    char name[50];       // nome do pokemon
    char tipo[50];       // tipo do pokemon
    int id;              // numero de identificao do Pokemon
    unsigned int status; // 0: vazio, 1: ocupado
};

class Pokedex
{
private:
    int size;                   // tamanho da tabela
    Pokemon *table;             // tabela hash
    vector<int> insertionOrder; // vetor para manter a ordem de insercao

    int hashFunction(int id, int i)
    {
        int hash1 = id % size;
        int hash2 = 1 + (id % (size - 1));
        return (hash1 + i * hash2) % size;
    }

public:
    Pokedex(int m)
    {
        size = m;
        table = new Pokemon[size];
        for (int i = 0; i < size; i++)
            table[i].status = 0; // marca todas as posicoes como vazias
    }

    ~Pokedex()
    {
        delete[] table;
    }

    int insert(const char *name, int id, const char *tipo)
    {
        int i = 0;
        int hash = hashFunction(id, i);

        while (table[hash].status == 1)
        {
            if (i == size)
                return -1; // Lista cheia
            i++;
            hash = hashFunction(id, i);
        }

        strncpy(table[hash].name, name, sizeof(table[hash].name));
        strncpy(table[hash].tipo, tipo, sizeof(table[hash].tipo));
        table[hash].id = id;
        table[hash].status = 1; // marca a posicao como ocupada

        insertionOrder.push_back(hash); // armazena indice na ordem de insercaoo
        return 0;                       // pokemon inserido
    }

    Pokemon *search(int id)
    {
        int i = 0;
        int hash = hashFunction(id, i);

        while (table[hash].status != 0)
        {
            if (table[hash].status == 1 && table[hash].id == id)
                return &table[hash]; // retorna o ponteiro para o Pokemon encontrado

            i++;
            hash = hashFunction(id, i);
        }

        return NULL; // Pokemon nao encontrado
    }

    // verifica se o id ja foi inserido
    int check_id(int id)
    {
        int i = 0;
        int hash = hashFunction(id, i);

        while (table[hash].status != 0) // busca por uma posicao da tabela vazia
        {
            if (table[hash].id == id)
                return -1; // id ja inserido na tabela.
            i++;
            hash = hashFunction(id, i);
        }
        return 0; // id nao inserido
    }

    void remove(int id)
    {
        Pokemon *pokemon = search(id);
        if (pokemon != NULL)
            pokemon->status = 0; // marca a posicao como removida
    }

    int printPokedex()
    {
        int aux = 0; // 0:pokedex vazia    1:pokedex com elementos
        for (int i = 0; i < insertionOrder.size(); i++)
        {
            int index = insertionOrder[i];
            if (table[index].status == 1)
            {
                aux++;
                if (aux == 1)
                    cout << "\nPokedex:\n";
                cout << "ID: " << table[index].id << " | Name: " << table[index].name << " Tipo: " << table[index].tipo << endl;
            }
        }
        return aux;
    }
};

int main()
{
    int id;         // ID do pokemon
    int option = 0; // opcaoo da funcao switch
    char name[50];  // declaracao movida para o escopo principal
    char tipo[50];  // declaracao movida para o escopo principal

    Pokemon *pokemon;
    Pokedex pokedex(1100); // Numero maximo de pokemons que existem atualmente

    cout << "|| Bem vindo a sua Pokedex, atualmente temos 1008 pokemons descobertos! Registre-os ||" << endl;

    while (option != 5)
    {
        cout << "\nMenu:\n";
        cout << "1 - Inserir Pokemon\n";
        cout << "2 - Pesquisar Pokemon\n";
        cout << "3 - Remover Pokemon\n";
        cout << "4 - Listar Pokedex\n";
        cout << "5 - Sair\n";
        cout << "Escolha uma opcao: ";
        cin >> option;
        system("cls");

        switch (option)
        {
        case 1:
            while (true)
            {
                cout << endl;

                cout << "Digite o nome do Pokemon ou digite 0 para voltar ao menu: ";
                cin.ignore(); // Ignora a quebra de linha pendente no buffer
                cin.getline(name, sizeof(name));

                if (strcmp(name, "0") == 0)
                    break;

                cout << "Digite o tipo do pokemon que voce inseriu acima: ";
                cin.getline(tipo, sizeof(tipo));

                cout << "Digite o ID do Pokemon: ";
                cin >> id;
                cout << endl;

                if (pokedex.check_id(id) == 0)
                {
                    if (pokedex.insert(name, id, tipo) == 0)

                        cout << "Pokemon " << name << " inserido na Pokedex! " << endl;
                    else
                        cout << "Pokedex cheia!" << endl;
                }
                else
                    cout << "\nId ja inserido na pokedex!" << endl;
            }
            break;

        case 2:
            cout << "Digite o ID do Pokemon a ser pesquisado: ";
            cin >> id;
            pokemon = pokedex.search(id);
            if (pokemon != NULL)
            {
                cout << "\nPokemon encontrado na Pokedex" << endl;
                cout << "Nome do Pokemon: " << pokemon->name << endl;
            }
            else
                cout << "Pokemon nao encontrado" << endl;
            break;

        case 3:
            cout << "Digite o ID do Pokemon a ser removido: ";
            cin >> id;

            pokemon = pokedex.search(id);
            if (pokemon != NULL)
            {
                pokedex.remove(id);
                cout << "\nPokemon " << pokemon->name << " removido da Pokedex!\n";
            }
            else
                cout << "\nPokemon com ID " << id << " nao encontrado na Pokedex!\n";
            break;

        case 4:
            if (pokedex.printPokedex() == 0)
                cout << "\nPokedex vazia!" << endl;
            break;
        case 5:
            cout << "\nObrigado por utilizar sua pokedex, volte sempre!" << endl;
            break;
        default:
            cout << "Opcao invalida! Tente novamente.\n";
        }
    }

    return 0;
}
